package com.sobolev.spring.gateway.security;


import lombok.Getter;
import lombok.Setter;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;

@Component
public class JwtAuthFilter extends AbstractGatewayFilterFactory<JwtAuthFilter.Config> {

    private final JwtUtil jwtUtil;

    // ‚úÖ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç super(Config.class)
    public JwtAuthFilter(JwtUtil jwtUtil) {
        super(Config.class);
        this.jwtUtil = jwtUtil;
    }

    @Override
    public GatewayFilter apply(Config config) {
        return (exchange, chain) -> {
            String authHeader = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);

            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                return exchange.getResponse().setComplete();
            }

            String token = authHeader.substring(7);
            if (!jwtUtil.validateToken(token)) {
                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                return exchange.getResponse().setComplete();
            }

            // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–µ—Ä–µ–¥–∞—ë–º –ª–æ–≥–∏–Ω –¥–∞–ª—å—à–µ
            String username = jwtUtil.getUsernameFromToken(token);
            exchange.getRequest().mutate().header("X-User", username).build();

            return chain.filter(exchange);
        };
    }

    // üëá –í–ª–æ–∂–µ–Ω–Ω—ã–π static-–∫–ª–∞—Å—Å Config –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    @Getter
    @Setter
    public static class Config {
        // –ü—É—Å—Ç–æ–π, –Ω–æ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å future-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–æ–ª–∏)
    }
}
